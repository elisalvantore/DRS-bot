const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, VoiceConnectionStatus, entersState } = require('@discordjs/voice');
const path = require('path');

let connection;
let player;

// T·∫°o resource t·ª´ file silence.mp3
function createSilenceResource() {
  const filePath = path.join(__dirname, 'silence.mp3');
  return createAudioResource(filePath);
}

// H√†m ƒë·ªÉ bot join k√™nh voice v√† ph√°t nh·∫°c 24/7
async function joinAndPlayForever(voiceChannel) {
  try {
    // K·∫øt n·ªëi voice
    connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: voiceChannel.guild.id,
      adapterCreator: voiceChannel.guild.voiceAdapterCreator,
      selfDeaf: false,  // kh√¥ng t·∫Øt mic
      selfMute: false   // kh√¥ng t·∫Øt loa
    });

    player = createAudioPlayer();

    // Khi audio k·∫øt th√∫c -> ph√°t l·∫°i ƒë·ªÉ gi·ªØ k·∫øt n·ªëi
    player.on(AudioPlayerStatus.Idle, () => {
      console.log('üîÅ Ph√°t l·∫°i silence.mp3 ƒë·ªÉ gi·ªØ k·∫øt n·ªëi');
      player.play(createSilenceResource());
    });

    // X·ª≠ l√Ω l·ªói
    player.on('error', error => {
      console.error('‚ö†Ô∏è L·ªói khi ph√°t audio:', error.message);
      player.play(createSilenceResource());
    });

    // B·∫Øt ƒë·∫ßu ph√°t
    const resource = createSilenceResource();
    player.play(resource);

    // K·∫øt n·ªëi player v·ªõi voice
    connection.subscribe(player);

    // ƒê·∫£m b·∫£o k·∫øt n·ªëi ·ªïn ƒë·ªãnh
    await entersState(connection, VoiceConnectionStatus.Ready, 30_000);
    console.log('‚úÖ Bot ƒë√£ v√†o voice v√† ƒëang ph√°t 24/7!');
  } catch (error) {
    console.error('‚ùå Kh√¥ng th·ªÉ v√†o voice:', error);
  }
}

// Xu·∫•t h√†m cho file index.js g·ªçi
module.exports = { joinAndPlayForever };
