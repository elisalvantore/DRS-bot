require("dotenv").config();
const { Client, GatewayIntentBits, Partials, Collection } = require("discord.js");
const { handleVoiceCommand } = require("./voice");

const PREFIX = process.env.PREFIX || "d!"; // L·∫•y prefix t·ª´ .env ho·∫∑c m·∫∑c ƒë·ªãnh l√† d!
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates
    ],
    partials: [Partials.Message, Partials.Channel, Partials.Reaction]
});

// Cooldowns ƒë·ªÉ tr√°nh spam
client.cooldowns = new Collection();

// Bot ready
client.once("ready", () => {
    console.log(`‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi t√™n: ${client.user.tag}`);
});

// Nh·∫≠n l·ªánh
client.on("messageCreate", async (message) => {
    if (message.author.bot || !message.content.startsWith(PREFIX)) return;

    const args = message.content.slice(PREFIX.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    // ‚è≥ Cooldown: 2s m·ªói user
    const now = Date.now();
    const cooldownAmount = 2000;
    if (client.cooldowns.has(message.author.id)) {
        const expirationTime = client.cooldowns.get(message.author.id) + cooldownAmount;
        if (now < expirationTime) {
            const timeLeft = ((expirationTime - now) / 1000).toFixed(1);
            return message.reply(`‚è≥ Vui l√≤ng ƒë·ª£i ${timeLeft}s tr∆∞·ªõc khi d√πng l·ªánh ti·∫øp.`);
        }
    }
    client.cooldowns.set(message.author.id, now);

    // üèì L·ªánh test ping
    if (command === "ping") {
        return message.reply("üèì Pong!");
    }

    // üéôÔ∏è L·ªánh voice (ƒë√£ x·ª≠ l√Ω trong voice.js)
    if (["join", "leave"].includes(command)) {
        return handleVoiceCommand(command, message);
    }

    // ‚ùì N·∫øu l·ªánh kh√¥ng h·ª£p l·ªá
    return message.reply("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. H√£y th·ª≠: `d!ping`, `d!join`, `d!leave`");
});

// X·ª≠ l√Ω l·ªói to√†n c·ª•c
process.on("unhandledRejection", (error) => {
    console.error("‚ùå L·ªói ngo√†i d·ª± ki·∫øn:", error);
});
client.on("error", (err) => console.error("‚ùå Bot g·∫∑p l·ªói:", err));
client.on("warn", (info) => console.warn("‚ö†Ô∏è C·∫£nh b√°o:", info));

// Ki·ªÉm tra TOKEN tr∆∞·ªõc khi login
if (!process.env.TOKEN) {
    console.error("‚ùå Thi·∫øu TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng!");
    process.exit(1);
}

client.login(process.env.TOKEN);
